version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3.12-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M

  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=loadsure
      - POSTGRES_PASSWORD=loadsurepass
      - POSTGRES_DB=loadsure
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U loadsure -d loadsure"]
      interval: 5s
      timeout: 5s
      retries: 10
    deploy:
      resources:
        limits:
          memory: 512M

  db-setup:
      build:
        context: ./backend
        dockerfile: Dockerfile
        cache_from:
          - node:18-alpine
      environment:
        - NODE_ENV=production
        - DB_DIALECT=postgres
        - DB_HOST=postgres
        - DB_PORT=5432
        - DB_USERNAME=loadsure
        - DB_PASSWORD=loadsurepass
        - DB_NAME=loadsure
        - DB_SSL=false
      depends_on:
        postgres:
          condition: service_healthy
      volumes:
        - ./backend:/usr/src/app
      command: >
        sh -c "
          echo 'Running database migrations...' &&
          npx sequelize-cli db:migrate &&
          echo 'Migrations completed successfully!'
        "
      restart: "no"

  api-service:
      build:
        context: ./backend
        dockerfile: Dockerfile
        cache_from:
          - node:18-alpine
      ports:
        - "3000:3000"
      environment:
        - NODE_ENV=production
        - PORT=3000
        - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
        - LOADSURE_API_KEY=MiphvjLVlwfZHrfhGklLgHzvjxiTbzIunOCrIAizpjVFiiRSufowtNhGGCLAiSmN
        - LOADSURE_BASE_URL=https://portal.loadsure.net
        - SUPPORT_DATA_REFRESH_SCHEDULE=0 0 * * *
        - NODE_OPTIONS=--experimental-vm-modules
        - DB_SSL=false
        # Add explicit database configuration
        - DB_DIALECT=postgres
        - DB_HOST=postgres
        - DB_PORT=5432
        - DB_USERNAME=loadsure
        - DB_PASSWORD=loadsurepass
        - DB_NAME=loadsure
      volumes:
        - ./backend/data:/usr/src/app/data
      depends_on:
        db-setup:
          condition: service_completed_successfully
        rabbitmq:
          condition: service_healthy
      command: node src/index.js
      healthcheck:
        test: ["CMD", "wget", "-qO-", "http://localhost:3000/api/support-data/status"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 10s

  loadsure-service:
      build:
        context: ./backend
        dockerfile: Dockerfile
        cache_from:
          - node:18-alpine
      environment:
        - NODE_ENV=production
        - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
        - LOADSURE_API_KEY=MiphvjLVlwfZHrfhGklLgHzvjxiTbzIunOCrIAizpjVFiiRSufowtNhGGCLAiSmN
        - LOADSURE_BASE_URL=https://portal.loadsure.net
        - NODE_OPTIONS=--experimental-vm-modules
        - DB_SSL=false
        # Add database configuration
        - DB_DIALECT=postgres
        - DB_HOST=postgres
        - DB_PORT=5432
        - DB_USERNAME=loadsure
        - DB_PASSWORD=loadsurepass
        - DB_NAME=loadsure
      volumes:
        - ./backend/data:/usr/src/app/data
      depends_on:
        api-service:
          condition: service_healthy
      command: node src/services/loadsureService.js

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      cache_from:
        - node:18-alpine
        - nginx:stable-alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - api-service

volumes:
  rabbitmq_data:
  postgres_data:
    name: loadsure_postgres_data