name: Deploy to DigitalOcean App Platform

on:
  push:
    branches:
      - main 
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      terraform_dir: ${{ steps.env.outputs.terraform_dir }}
    steps:
    - id: env
      run: |
        # For workflow_dispatch, use the selected environment
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        else
          # Default to staging for automated pushes to main
          echo "environment=staging" >> $GITHUB_OUTPUT
        fi
        
        # Set the terraform directory
        ENV="${{ github.event.inputs.environment || 'staging' }}"
        echo "terraform_dir=terraform/environments/$ENV" >> $GITHUB_OUTPUT

  validate-deployment:
    needs: determine-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}-approval
    steps:
    - name: Validate deployment
      run: echo "Deployment to ${{ needs.determine-environment.outputs.environment }} validated"

  deploy-infrastructure:
    needs: [determine-environment, validate-deployment]
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    outputs:
      app_id: ${{ steps.terraform-apply.outputs.app_id }}
      app_url: ${{ steps.terraform-apply.outputs.app_url }}
      tf_workspace: ${{ steps.terraform-init.outputs.terraform_workspace }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        terraform_wrapper: false
    
    - name: Configure DigitalOcean CLI
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Terraform Init
      id: terraform-init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_KEY }}
      run: |
        cd terraform
        # Use a workspace for better state isolation
        WORKSPACE="${{ needs.determine-environment.outputs.environment }}"
        terraform init \
          -backend-config="access_key=${{ secrets.SPACES_ACCESS_KEY }}" \
          -backend-config="secret_key=${{ secrets.SPACES_SECRET_KEY }}"
        
        # Create or select workspace
        if terraform workspace list | grep -q "$WORKSPACE"; then
          terraform workspace select "$WORKSPACE"
        else
          terraform workspace new "$WORKSPACE"
        fi
        
        echo "terraform_workspace=$WORKSPACE" >> $GITHUB_OUTPUT
    
    - name: Terraform Plan
      id: terraform-plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_KEY }}
      run: |
        cd terraform
        terraform plan \
          -var-file="environments/${{ needs.determine-environment.outputs.environment }}/terraform.tfvars" \
          -var="do_token=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" \
          -var="loadsure_api_key=${{ secrets.LOADSURE_API_KEY }}" \
          -var="rabbitmq_url=${{ secrets.RABBITMQ_URL }}" \
          -out=tfplan
        
        # Check if there are changes
        if terraform show -no-color tfplan | grep -q "No changes."; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Terraform Apply
      id: terraform-apply
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_KEY }}
      run: |
        cd terraform
        terraform apply -auto-approve tfplan
        
        # Output values
        echo "app_id=$(terraform output -raw app_id)" >> $GITHUB_OUTPUT
        echo "app_url=$(terraform output -raw app_live_url)" >> $GITHUB_OUTPUT
    
    - name: Capture Terraform Outputs
      if: success()
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_KEY }}
      run: |
        cd terraform
        terraform output -json > terraform_output.json
        
    - name: Upload Terraform Output
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: terraform-output-${{ needs.determine-environment.outputs.environment }}
        path: terraform/terraform_output.json
        retention-days: 7

  wait-for-deployment:
    needs: [determine-environment, deploy-infrastructure]
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
    - name: Configure DigitalOcean CLI
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Wait for deployment to complete
      run: |
        APP_ID="${{ needs.deploy-infrastructure.outputs.app_id }}"
        echo "Waiting for app deployment to complete for APP_ID: $APP_ID"
        
        # Check app status with timeout and exponential backoff
        TIMEOUT=900  # 15 minutes
        START_TIME=$(date +%s)
        BACKOFF=10
        MAX_BACKOFF=60
        
        while true; do
          CURRENT_TIME=$(date +%s)
          ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
          
          if [ $ELAPSED_TIME -gt $TIMEOUT ]; then
            echo "Deployment timed out after $TIMEOUT seconds"
            exit 1
          fi
          
          STATUS=$(doctl apps get $APP_ID --format Status --no-header)
          echo "App status: $STATUS (Elapsed: ${ELAPSED_TIME}s)"
          
          if [[ "$STATUS" == "ACTIVE" || "$STATUS" == "RUNNING" ]]; then
            echo "App is running!"
            break
          elif [[ "$STATUS" == "ERROR" || "$STATUS" == "FAILED" ]]; then
            echo "App deployment failed!"
            # Get error details
            doctl apps get $APP_ID --format Status,ActiveDeployment --no-header
            exit 1
          fi
          
          # Wait with exponential backoff
          echo "Waiting ${BACKOFF} seconds before next check..."
          sleep $BACKOFF
          
          # Increase backoff, but not more than MAX_BACKOFF
          BACKOFF=$((BACKOFF * 2))
          if [ $BACKOFF -gt $MAX_BACKOFF ]; then
            BACKOFF=$MAX_BACKOFF
          fi
        done

  run-migrations:
    needs: [determine-environment, deploy-infrastructure, wait-for-deployment]
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
    - name: Configure DigitalOcean CLI
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Run database migrations
      id: run-migrations
      run: |
        APP_ID="${{ needs.deploy-infrastructure.outputs.app_id }}"
        
        echo "Running database migrations..."
        
        # Wait a bit more for the app to be fully ready
        sleep 30
        
        # Try migration with error handling
        if OUTPUT=$(doctl apps exec $APP_ID \
          --component api-service \
          --command "npm run migrate" 2>&1); then
          echo "Migration output: $OUTPUT"
          echo "Migrations completed successfully"
        else
          echo "Migration failed with output: $OUTPUT"
          # Don't fail the deployment if migrations fail - they might not be needed
          echo "::warning::Database migrations failed, but continuing deployment"
        fi

  smoke-tests:
    needs: [determine-environment, deploy-infrastructure, run-migrations]
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Run smoke tests
      id: smoke-tests
      run: |
        APP_URL="${{ needs.deploy-infrastructure.outputs.app_url }}"
        
        echo "Running smoke tests against $APP_URL"
        
        # Health check with retry logic
        MAX_RETRIES=5
        RETRY_COUNT=0
        
        until curl -f -s "$APP_URL/health" || [ $RETRY_COUNT -eq $MAX_RETRIES ]; do
          RETRY_COUNT=$((RETRY_COUNT+1))
          echo "Health check attempt $RETRY_COUNT failed, retrying in 10 seconds..."
          sleep 10
        done
        
        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
          echo "Health check failed after $MAX_RETRIES attempts"
          exit 1
        fi
        
        echo "✅ Health check passed!"
        
        # Additional endpoint checks with better error handling
        echo "Checking API endpoints..."
        
        # Check API docs (optional - don't fail if not available)
        if curl -f -s "$APP_URL/api-docs.json" > /dev/null 2>&1; then
          echo "✅ API docs endpoint accessible"
        else
          echo "⚠️ API docs endpoint not accessible (this may be expected)"
        fi
        
        # Check support data status (optional)
        if curl -f -s "$APP_URL/api/support-data/status" > /dev/null 2>&1; then
          echo "✅ Support data status endpoint accessible"
        else
          echo "⚠️ Support data status endpoint not accessible (this may be expected)"
        fi
        
        # Check API response content
        HEALTH_RESPONSE=$(curl -s "$APP_URL/health" || echo "failed")
        echo "Health response: $HEALTH_RESPONSE"
        
        if echo "$HEALTH_RESPONSE" | grep -qi "ok\|healthy\|running\|success"; then
          echo "✅ Health check response indicates healthy status"
        else
          echo "⚠️ Health check response doesn't clearly indicate status, but endpoint is accessible"
        fi
        
        echo "✅ All smoke tests completed!"

  # Additional approval gate for production deployments
  production-final-approval:
    if: needs.determine-environment.outputs.environment == 'production'
    needs: [determine-environment, smoke-tests]
    runs-on: ubuntu-latest
    environment: production-final-approval
    steps:
    - name: Final production approval
      run: echo "Final approval granted for production deployment"

  finalize-deployment:
    needs: [determine-environment, deploy-infrastructure, smoke-tests]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Report deployment status
      run: |
        ENV="${{ needs.determine-environment.outputs.environment }}"
        APP_URL="${{ needs.deploy-infrastructure.outputs.app_url }}"
        
        echo "📊 Deployment Summary:"
        echo "Environment: $ENV"
        echo "App URL: $APP_URL"
        echo "Infrastructure: ${{ needs.deploy-infrastructure.result }}"
        echo "Smoke Tests: ${{ needs.smoke-tests.result }}"
        
        if [[ "${{ needs.deploy-infrastructure.result }}" == "success" && "${{ needs.smoke-tests.result }}" == "success" ]]; then
          echo "✅ Deployment to $ENV completed successfully!"
          echo "🌐 Application URL: $APP_URL"
          echo "🚀 Ready for use!"
        elif [[ "${{ needs.deploy-infrastructure.result }}" == "success" ]]; then
          echo "⚠️ Infrastructure deployed to $ENV but smoke tests had issues"
          echo "🌐 Application URL: $APP_URL"
          echo "Please verify the application manually"
        else
          echo "❌ Deployment to $ENV failed"
          echo "Please check the logs and retry if necessary"
        fi
    
    - name: Cleanup on failure
      if: failure()
      run: |
        echo "🧹 Cleaning up failed deployment artifacts..."
        # Add any cleanup logic here if needed