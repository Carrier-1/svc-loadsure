name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmqctl node_health_check"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './backend/package-lock.json'
    
    - name: Install dependencies
      run: |
        cd backend
        npm ci
    
    - name: Run linter
      run: |
        cd backend
        npm run lint
    
    - name: Run unit tests
      run: |
        cd backend
        npm test -- --coverage
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_NAME: test_db
        REDIS_URL: redis://localhost:6379
        LOADSURE_API_KEY: test-api-key
        RABBITMQ_URL: amqp://localhost:5672
    
    - name: Upload test coverage
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: test-coverage
        path: backend/coverage
        retention-days: 7

  validate-infrastructure:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        terraform_wrapper: false
    
    - name: Validate App Platform specs
      run: |
        # Basic YAML validation
        python3 -c "
        import yaml
        import sys
        
        files = ['.do/app.staging.yaml', '.do/app.production.yaml']
        for file in files:
            try:
                with open(file, 'r') as f:
                    yaml.safe_load(f)
                print(f'✅ {file} is valid YAML')
            except Exception as e:
                print(f'❌ {file} is invalid: {e}')
                sys.exit(1)
        "
    
    - name: Terraform format check
      run: |
        cd terraform
        terraform fmt -check -recursive
    
    - name: Terraform validate (staging)
      run: |
        cd terraform
        terraform init -backend=false
        terraform validate
        terraform plan \
          -var-file="environments/staging/terraform.tfvars" \
          -var="do_token=fake-token" \
          -var="loadsure_api_key=fake-key" \
          -var="rabbitmq_url=fake-url" \
          -out=tfplan-staging
    
    - name: Terraform validate (production)
      run: |
        cd terraform
        terraform init -backend=false
        terraform validate
        terraform plan \
          -var-file="environments/production/terraform.tfvars" \
          -var="do_token=fake-token" \
          -var="loadsure_api_key=fake-key" \
          -var="rabbitmq_url=fake-url" \
          -out=tfplan-production

  # In trunk-based development, checking for drift is crucial
  check-app-platform-drift:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install jq and yq
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
        pip install yq
    
    - name: Compare .do configs with terraform
      run: |
        # Extract key configuration from .do YAML files
        for ENV in staging production; do
          echo "Checking $ENV environment for drift..."
          
          # Extract values from .do yaml
          DO_INSTANCE_COUNT=$(yq -r '.services[] | select(.name == "api-service") | .instance_count // 1' .do/app.$ENV.yaml)
          DO_INSTANCE_SIZE=$(yq -r '.services[] | select(.name == "api-service") | .instance_size_slug // "basic-xxs"' .do/app.$ENV.yaml)
          
          # Extract values from terraform vars
          TF_INSTANCE_COUNT=$(grep "api_instance_count" terraform/environments/$ENV/terraform.tfvars | grep -oP '\d+')
          TF_INSTANCE_SIZE=$(grep "api_instance_size" terraform/environments/$ENV/terraform.tfvars | grep -oP '"[^"]+"' | tr -d '"')
          
          # Compare values
          if [ "$DO_INSTANCE_COUNT" != "$TF_INSTANCE_COUNT" ]; then
            echo "⚠️ Drift detected: instance_count mismatch in $ENV ($DO_INSTANCE_COUNT vs $TF_INSTANCE_COUNT)"
          fi
          
          if [ "$DO_INSTANCE_SIZE" != "$TF_INSTANCE_SIZE" ]; then
            echo "⚠️ Drift detected: instance_size mismatch in $ENV ($DO_INSTANCE_SIZE vs $TF_INSTANCE_SIZE)"
          fi
          
          # Check other important config values...
          # (Log level, env vars, etc.)
        done
    
    - name: Sync configurations (PR only)
      if: github.event_name == 'pull_request'
      run: |
        # For PRs, we don't want to automatically fix drift
        # but we should check and report it
        node scripts/sync-app-config.js --check-only
        
        if [ $? -ne 0 ]; then
          echo "::warning::Configuration drift detected. Please run 'node scripts/sync-app-config.js' locally to fix."
        fi

  feature-integration-test:
    # This job runs integration tests on pull requests to main
    if: github.event_name == 'pull_request'
    needs: [test]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'backend/package-lock.json'
    
    - name: Install dependencies
      run: |
        cd backend
        npm ci
    
    - name: Run integration tests
      run: |
        cd backend
        npm run test:integration
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_NAME: test_db
        REDIS_URL: redis://localhost:6379
        LOADSURE_API_KEY: test-api-key
        RABBITMQ_URL: amqp://localhost:5672

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run security audit
      run: |
        cd backend
        npm audit --audit-level=high || echo "Security vulnerabilities found, review the report"
    
    - name: Scan for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        extra_args: --debug --only-verified --max-depth 50
    
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'svc-loadsure'
        path: 'backend'
        format: 'HTML'
        out: 'reports'
        args: >
          --failOnCVSS 7
          --enableRetired
    
    - name: Upload dependency check report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: reports
        retention-days: 7

  # Ensure the trunk (main) stays healthy by checking if this change can be merged
  check-merge-readiness:
    if: github.event_name == 'pull_request'
    needs: [test, validate-infrastructure, check-app-platform-drift, feature-integration-test, security-scan]
    runs-on: ubuntu-latest
    steps:
    - name: Check all jobs succeeded
      run: |
        if [[ "${{ needs.test.result }}" == "success" && \
              "${{ needs.validate-infrastructure.result }}" == "success" && \
              "${{ needs.check-app-platform-drift.result }}" == "success" && \
              "${{ needs.feature-integration-test.result }}" == "success" && \
              "${{ needs.security-scan.result }}" == "success" ]]; then
          echo "✅ All checks passed - change is ready to be merged to the trunk"
        else
          echo "❌ Some checks failed - fix issues before merging to trunk"
          exit 1
        fi